ARM GAS  /tmp/cc3HmRIO.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"oled.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Module/OLED/oled.c"
  20              		.section	.text.WriteCmd,"ax",%progbits
  21              		.align	1
  22              		.global	WriteCmd
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	WriteCmd:
  28              	.LVL0:
  29              	.LFB132:
   1:Module/OLED/oled.c **** #include "oled.h"
   2:Module/OLED/oled.c **** #include "asc.h"
   3:Module/OLED/oled.c **** #include "main.h"
   4:Module/OLED/oled.c **** 
   5:Module/OLED/oled.c **** void WriteCmd(unsigned char I2C_Command) //写命令利用I2C通讯
   6:Module/OLED/oled.c ****  {
  30              		.loc 1 6 2 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 6 2 is_stmt 0 view .LVU1
  35 0000 00B5     		push	{lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 14, -4
  39 0002 87B0     		sub	sp, sp, #28
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 32
  42 0004 8DF81700 		strb	r0, [sp, #23]
   7:Module/OLED/oled.c **** 	HAL_I2C_Mem_Write(&hi2c2,OLED0561_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,100);
  43              		.loc 1 7 2 is_stmt 1 view .LVU2
  44 0008 6423     		movs	r3, #100
  45 000a 0293     		str	r3, [sp, #8]
  46 000c 0123     		movs	r3, #1
  47 000e 0193     		str	r3, [sp, #4]
  48 0010 0DF11702 		add	r2, sp, #23
  49 0014 0092     		str	r2, [sp]
  50 0016 0022     		movs	r2, #0
  51 0018 7821     		movs	r1, #120
ARM GAS  /tmp/cc3HmRIO.s 			page 2


  52 001a 0348     		ldr	r0, .L3
  53              	.LVL1:
  54              		.loc 1 7 2 is_stmt 0 view .LVU3
  55 001c FFF7FEFF 		bl	HAL_I2C_Mem_Write
  56              	.LVL2:
   8:Module/OLED/oled.c ****  }
  57              		.loc 1 8 2 view .LVU4
  58 0020 07B0     		add	sp, sp, #28
  59              	.LCFI2:
  60              		.cfi_def_cfa_offset 4
  61              		@ sp needed
  62 0022 5DF804FB 		ldr	pc, [sp], #4
  63              	.L4:
  64 0026 00BF     		.align	2
  65              	.L3:
  66 0028 00000000 		.word	hi2c2
  67              		.cfi_endproc
  68              	.LFE132:
  70              		.section	.text.WriteDat,"ax",%progbits
  71              		.align	1
  72              		.global	WriteDat
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  77              	WriteDat:
  78              	.LVL3:
  79              	.LFB133:
   9:Module/OLED/oled.c **** 
  10:Module/OLED/oled.c **** void WriteDat(unsigned char I2C_Data)    //写数据利用I2C通讯
  11:Module/OLED/oled.c ****  {
  80              		.loc 1 11 2 is_stmt 1 view -0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		.loc 1 11 2 is_stmt 0 view .LVU6
  85 0000 00B5     		push	{lr}
  86              	.LCFI3:
  87              		.cfi_def_cfa_offset 4
  88              		.cfi_offset 14, -4
  89 0002 87B0     		sub	sp, sp, #28
  90              	.LCFI4:
  91              		.cfi_def_cfa_offset 32
  92 0004 8DF81700 		strb	r0, [sp, #23]
  12:Module/OLED/oled.c **** 		HAL_I2C_Mem_Write(&hi2c2,OLED0561_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,100);
  93              		.loc 1 12 3 is_stmt 1 view .LVU7
  94 0008 6423     		movs	r3, #100
  95 000a 0293     		str	r3, [sp, #8]
  96 000c 0123     		movs	r3, #1
  97 000e 0193     		str	r3, [sp, #4]
  98 0010 0DF11702 		add	r2, sp, #23
  99 0014 0092     		str	r2, [sp]
 100 0016 4022     		movs	r2, #64
 101 0018 7821     		movs	r1, #120
 102 001a 0348     		ldr	r0, .L7
 103              	.LVL4:
 104              		.loc 1 12 3 is_stmt 0 view .LVU8
 105 001c FFF7FEFF 		bl	HAL_I2C_Mem_Write
ARM GAS  /tmp/cc3HmRIO.s 			page 3


 106              	.LVL5:
  13:Module/OLED/oled.c ****   }
 107              		.loc 1 13 3 view .LVU9
 108 0020 07B0     		add	sp, sp, #28
 109              	.LCFI5:
 110              		.cfi_def_cfa_offset 4
 111              		@ sp needed
 112 0022 5DF804FB 		ldr	pc, [sp], #4
 113              	.L8:
 114 0026 00BF     		.align	2
 115              	.L7:
 116 0028 00000000 		.word	hi2c2
 117              		.cfi_endproc
 118              	.LFE133:
 120              		.section	.text.OLED_Init,"ax",%progbits
 121              		.align	1
 122              		.global	OLED_Init
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 127              	OLED_Init:
 128              	.LFB134:
  14:Module/OLED/oled.c **** 
  15:Module/OLED/oled.c **** void OLED_Init(void)
  16:Module/OLED/oled.c **** {
 129              		.loc 1 16 1 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133 0000 08B5     		push	{r3, lr}
 134              	.LCFI6:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 3, -8
 137              		.cfi_offset 14, -4
  17:Module/OLED/oled.c **** 	//HAL_Delay(100); //这里的延时很重要
  18:Module/OLED/oled.c **** 
  19:Module/OLED/oled.c **** 	WriteCmd(0xAE); //display off
 138              		.loc 1 19 2 view .LVU11
 139 0002 AE20     		movs	r0, #174
 140 0004 FFF7FEFF 		bl	WriteCmd
 141              	.LVL6:
  20:Module/OLED/oled.c **** 	WriteCmd(0x20);	//Set Memory Addressing Mode
 142              		.loc 1 20 2 view .LVU12
 143 0008 2020     		movs	r0, #32
 144 000a FFF7FEFF 		bl	WriteCmd
 145              	.LVL7:
  21:Module/OLED/oled.c **** 	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mod
 146              		.loc 1 21 2 view .LVU13
 147 000e 1020     		movs	r0, #16
 148 0010 FFF7FEFF 		bl	WriteCmd
 149              	.LVL8:
  22:Module/OLED/oled.c **** 	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 150              		.loc 1 22 2 view .LVU14
 151 0014 B020     		movs	r0, #176
 152 0016 FFF7FEFF 		bl	WriteCmd
 153              	.LVL9:
  23:Module/OLED/oled.c **** 	WriteCmd(0xc8);	//Set COM Output Scan Direction
ARM GAS  /tmp/cc3HmRIO.s 			page 4


 154              		.loc 1 23 2 view .LVU15
 155 001a C820     		movs	r0, #200
 156 001c FFF7FEFF 		bl	WriteCmd
 157              	.LVL10:
  24:Module/OLED/oled.c **** 	WriteCmd(0x00); //---set low column address
 158              		.loc 1 24 2 view .LVU16
 159 0020 0020     		movs	r0, #0
 160 0022 FFF7FEFF 		bl	WriteCmd
 161              	.LVL11:
  25:Module/OLED/oled.c **** 	WriteCmd(0x10); //---set high column address
 162              		.loc 1 25 2 view .LVU17
 163 0026 1020     		movs	r0, #16
 164 0028 FFF7FEFF 		bl	WriteCmd
 165              	.LVL12:
  26:Module/OLED/oled.c **** 	WriteCmd(0x40); //--set start line address
 166              		.loc 1 26 2 view .LVU18
 167 002c 4020     		movs	r0, #64
 168 002e FFF7FEFF 		bl	WriteCmd
 169              	.LVL13:
  27:Module/OLED/oled.c **** 	WriteCmd(0x81); //--set contrast control register
 170              		.loc 1 27 2 view .LVU19
 171 0032 8120     		movs	r0, #129
 172 0034 FFF7FEFF 		bl	WriteCmd
 173              	.LVL14:
  28:Module/OLED/oled.c **** 	WriteCmd(0xff); //亮度调节 0x00~0xff
 174              		.loc 1 28 2 view .LVU20
 175 0038 FF20     		movs	r0, #255
 176 003a FFF7FEFF 		bl	WriteCmd
 177              	.LVL15:
  29:Module/OLED/oled.c **** 	WriteCmd(0xa1); //--set segment re-map 0 to 127
 178              		.loc 1 29 2 view .LVU21
 179 003e A120     		movs	r0, #161
 180 0040 FFF7FEFF 		bl	WriteCmd
 181              	.LVL16:
  30:Module/OLED/oled.c **** 	WriteCmd(0xa6); //--set normal display
 182              		.loc 1 30 2 view .LVU22
 183 0044 A620     		movs	r0, #166
 184 0046 FFF7FEFF 		bl	WriteCmd
 185              	.LVL17:
  31:Module/OLED/oled.c **** 	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 186              		.loc 1 31 2 view .LVU23
 187 004a A820     		movs	r0, #168
 188 004c FFF7FEFF 		bl	WriteCmd
 189              	.LVL18:
  32:Module/OLED/oled.c **** 	WriteCmd(0x3F); //
 190              		.loc 1 32 2 view .LVU24
 191 0050 3F20     		movs	r0, #63
 192 0052 FFF7FEFF 		bl	WriteCmd
 193              	.LVL19:
  33:Module/OLED/oled.c **** 	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 194              		.loc 1 33 2 view .LVU25
 195 0056 A420     		movs	r0, #164
 196 0058 FFF7FEFF 		bl	WriteCmd
 197              	.LVL20:
  34:Module/OLED/oled.c **** 	WriteCmd(0xd3); //-set display offset
 198              		.loc 1 34 2 view .LVU26
 199 005c D320     		movs	r0, #211
ARM GAS  /tmp/cc3HmRIO.s 			page 5


 200 005e FFF7FEFF 		bl	WriteCmd
 201              	.LVL21:
  35:Module/OLED/oled.c **** 	WriteCmd(0x00); //-not offset
 202              		.loc 1 35 2 view .LVU27
 203 0062 0020     		movs	r0, #0
 204 0064 FFF7FEFF 		bl	WriteCmd
 205              	.LVL22:
  36:Module/OLED/oled.c **** 	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 206              		.loc 1 36 2 view .LVU28
 207 0068 D520     		movs	r0, #213
 208 006a FFF7FEFF 		bl	WriteCmd
 209              	.LVL23:
  37:Module/OLED/oled.c **** 	WriteCmd(0xf0); //--set divide ratio
 210              		.loc 1 37 2 view .LVU29
 211 006e F020     		movs	r0, #240
 212 0070 FFF7FEFF 		bl	WriteCmd
 213              	.LVL24:
  38:Module/OLED/oled.c **** 	WriteCmd(0xd9); //--set pre-charge period
 214              		.loc 1 38 2 view .LVU30
 215 0074 D920     		movs	r0, #217
 216 0076 FFF7FEFF 		bl	WriteCmd
 217              	.LVL25:
  39:Module/OLED/oled.c **** 	WriteCmd(0x22); //
 218              		.loc 1 39 2 view .LVU31
 219 007a 2220     		movs	r0, #34
 220 007c FFF7FEFF 		bl	WriteCmd
 221              	.LVL26:
  40:Module/OLED/oled.c **** 	WriteCmd(0xda); //--set com pins hardware configuration
 222              		.loc 1 40 2 view .LVU32
 223 0080 DA20     		movs	r0, #218
 224 0082 FFF7FEFF 		bl	WriteCmd
 225              	.LVL27:
  41:Module/OLED/oled.c **** 	WriteCmd(0x12);
 226              		.loc 1 41 2 view .LVU33
 227 0086 1220     		movs	r0, #18
 228 0088 FFF7FEFF 		bl	WriteCmd
 229              	.LVL28:
  42:Module/OLED/oled.c **** 	WriteCmd(0xdb); //--set vcomh
 230              		.loc 1 42 2 view .LVU34
 231 008c DB20     		movs	r0, #219
 232 008e FFF7FEFF 		bl	WriteCmd
 233              	.LVL29:
  43:Module/OLED/oled.c **** 	WriteCmd(0x20); //0x20,0.77xVcc
 234              		.loc 1 43 2 view .LVU35
 235 0092 2020     		movs	r0, #32
 236 0094 FFF7FEFF 		bl	WriteCmd
 237              	.LVL30:
  44:Module/OLED/oled.c **** 	WriteCmd(0x8d); //--set DC-DC enable
 238              		.loc 1 44 2 view .LVU36
 239 0098 8D20     		movs	r0, #141
 240 009a FFF7FEFF 		bl	WriteCmd
 241              	.LVL31:
  45:Module/OLED/oled.c **** 	WriteCmd(0x14); //
 242              		.loc 1 45 2 view .LVU37
 243 009e 1420     		movs	r0, #20
 244 00a0 FFF7FEFF 		bl	WriteCmd
 245              	.LVL32:
ARM GAS  /tmp/cc3HmRIO.s 			page 6


  46:Module/OLED/oled.c **** 	WriteCmd(0xaf); //--turn on oled panel
 246              		.loc 1 46 2 view .LVU38
 247 00a4 AF20     		movs	r0, #175
 248 00a6 FFF7FEFF 		bl	WriteCmd
 249              	.LVL33:
  47:Module/OLED/oled.c **** }
 250              		.loc 1 47 1 is_stmt 0 view .LVU39
 251 00aa 08BD     		pop	{r3, pc}
 252              		.cfi_endproc
 253              	.LFE134:
 255              		.section	.text.OLED_SetPos,"ax",%progbits
 256              		.align	1
 257              		.global	OLED_SetPos
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 262              	OLED_SetPos:
 263              	.LVL34:
 264              	.LFB135:
  48:Module/OLED/oled.c **** 
  49:Module/OLED/oled.c **** void OLED_SetPos(unsigned char x, unsigned char y) //设置起始点坐标
  50:Module/OLED/oled.c **** {
 265              		.loc 1 50 1 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              		.loc 1 50 1 is_stmt 0 view .LVU41
 270 0000 10B5     		push	{r4, lr}
 271              	.LCFI7:
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 4, -8
 274              		.cfi_offset 14, -4
 275 0002 0446     		mov	r4, r0
  51:Module/OLED/oled.c **** 	WriteCmd(0xb0+y);
 276              		.loc 1 51 2 is_stmt 1 view .LVU42
 277 0004 A1F15000 		sub	r0, r1, #80
 278              	.LVL35:
 279              		.loc 1 51 2 is_stmt 0 view .LVU43
 280 0008 C0B2     		uxtb	r0, r0
 281 000a FFF7FEFF 		bl	WriteCmd
 282              	.LVL36:
  52:Module/OLED/oled.c **** 	WriteCmd(((x&0xf0)>>4)|0x10);
 283              		.loc 1 52 2 is_stmt 1 view .LVU44
 284              		.loc 1 52 20 is_stmt 0 view .LVU45
 285 000e 2009     		lsrs	r0, r4, #4
 286              		.loc 1 52 2 view .LVU46
 287 0010 40F01000 		orr	r0, r0, #16
 288 0014 FFF7FEFF 		bl	WriteCmd
 289              	.LVL37:
  53:Module/OLED/oled.c **** 	WriteCmd((x&0x0f)|0x01);
 290              		.loc 1 53 2 is_stmt 1 view .LVU47
 291 0018 04F00E00 		and	r0, r4, #14
 292 001c 40F00100 		orr	r0, r0, #1
 293 0020 FFF7FEFF 		bl	WriteCmd
 294              	.LVL38:
  54:Module/OLED/oled.c **** }
 295              		.loc 1 54 1 is_stmt 0 view .LVU48
ARM GAS  /tmp/cc3HmRIO.s 			page 7


 296 0024 10BD     		pop	{r4, pc}
 297              		.loc 1 54 1 view .LVU49
 298              		.cfi_endproc
 299              	.LFE135:
 301              		.section	.text.OLED_Fill,"ax",%progbits
 302              		.align	1
 303              		.global	OLED_Fill
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 308              	OLED_Fill:
 309              	.LVL39:
 310              	.LFB136:
  55:Module/OLED/oled.c **** 
  56:Module/OLED/oled.c **** void OLED_Fill(unsigned char fill_Data)//全屏填充
  57:Module/OLED/oled.c **** {
 311              		.loc 1 57 1 is_stmt 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              		.loc 1 57 1 is_stmt 0 view .LVU51
 316 0000 70B5     		push	{r4, r5, r6, lr}
 317              	.LCFI8:
 318              		.cfi_def_cfa_offset 16
 319              		.cfi_offset 4, -16
 320              		.cfi_offset 5, -12
 321              		.cfi_offset 6, -8
 322              		.cfi_offset 14, -4
 323 0002 0546     		mov	r5, r0
  58:Module/OLED/oled.c **** 	unsigned char m,n;
 324              		.loc 1 58 2 is_stmt 1 view .LVU52
  59:Module/OLED/oled.c **** 	for(m=0;m<8;m++)
 325              		.loc 1 59 2 view .LVU53
 326              	.LVL40:
 327              		.loc 1 59 7 is_stmt 0 view .LVU54
 328 0004 0026     		movs	r6, #0
 329              		.loc 1 59 2 view .LVU55
 330 0006 09E0     		b	.L14
 331              	.LVL41:
 332              	.L16:
  60:Module/OLED/oled.c **** 	{
  61:Module/OLED/oled.c **** 		WriteCmd(0xb0+m);		//page0-page1
  62:Module/OLED/oled.c **** 		WriteCmd(0x00);		//low column start address
  63:Module/OLED/oled.c **** 		WriteCmd(0x10);		//high column start address
  64:Module/OLED/oled.c **** 		for(n=0;n<128;n++)
  65:Module/OLED/oled.c **** 			{
  66:Module/OLED/oled.c **** 				WriteDat(fill_Data);
 333              		.loc 1 66 5 is_stmt 1 view .LVU56
 334 0008 2846     		mov	r0, r5
 335 000a FFF7FEFF 		bl	WriteDat
 336              	.LVL42:
  64:Module/OLED/oled.c **** 			{
 337              		.loc 1 64 18 discriminator 3 view .LVU57
 338 000e 0134     		adds	r4, r4, #1
 339              	.LVL43:
  64:Module/OLED/oled.c **** 			{
 340              		.loc 1 64 18 is_stmt 0 discriminator 3 view .LVU58
ARM GAS  /tmp/cc3HmRIO.s 			page 8


 341 0010 E4B2     		uxtb	r4, r4
 342              	.LVL44:
 343              	.L15:
  64:Module/OLED/oled.c **** 			{
 344              		.loc 1 64 12 is_stmt 1 discriminator 1 view .LVU59
 345 0012 14F0800F 		tst	r4, #128
 346 0016 F7D0     		beq	.L16
  59:Module/OLED/oled.c **** 	for(m=0;m<8;m++)
 347              		.loc 1 59 15 discriminator 2 view .LVU60
 348 0018 0136     		adds	r6, r6, #1
 349              	.LVL45:
  59:Module/OLED/oled.c **** 	for(m=0;m<8;m++)
 350              		.loc 1 59 15 is_stmt 0 discriminator 2 view .LVU61
 351 001a F6B2     		uxtb	r6, r6
 352              	.LVL46:
 353              	.L14:
  59:Module/OLED/oled.c **** 	for(m=0;m<8;m++)
 354              		.loc 1 59 11 is_stmt 1 discriminator 1 view .LVU62
 355 001c 072E     		cmp	r6, #7
 356 001e 0CD8     		bhi	.L19
  61:Module/OLED/oled.c **** 		WriteCmd(0x00);		//low column start address
 357              		.loc 1 61 3 view .LVU63
 358 0020 A6F15000 		sub	r0, r6, #80
 359 0024 C0B2     		uxtb	r0, r0
 360 0026 FFF7FEFF 		bl	WriteCmd
 361              	.LVL47:
  62:Module/OLED/oled.c **** 		WriteCmd(0x10);		//high column start address
 362              		.loc 1 62 3 view .LVU64
 363 002a 0020     		movs	r0, #0
 364 002c FFF7FEFF 		bl	WriteCmd
 365              	.LVL48:
  63:Module/OLED/oled.c **** 		for(n=0;n<128;n++)
 366              		.loc 1 63 3 view .LVU65
 367 0030 1020     		movs	r0, #16
 368 0032 FFF7FEFF 		bl	WriteCmd
 369              	.LVL49:
  64:Module/OLED/oled.c **** 			{
 370              		.loc 1 64 3 view .LVU66
  64:Module/OLED/oled.c **** 			{
 371              		.loc 1 64 8 is_stmt 0 view .LVU67
 372 0036 0024     		movs	r4, #0
  64:Module/OLED/oled.c **** 			{
 373              		.loc 1 64 3 view .LVU68
 374 0038 EBE7     		b	.L15
 375              	.LVL50:
 376              	.L19:
  67:Module/OLED/oled.c **** 			}
  68:Module/OLED/oled.c **** 	}
  69:Module/OLED/oled.c **** }
 377              		.loc 1 69 1 view .LVU69
 378 003a 70BD     		pop	{r4, r5, r6, pc}
 379              		.loc 1 69 1 view .LVU70
 380              		.cfi_endproc
 381              	.LFE136:
 383              		.section	.text.OLED_CLS,"ax",%progbits
 384              		.align	1
 385              		.global	OLED_CLS
ARM GAS  /tmp/cc3HmRIO.s 			page 9


 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 390              	OLED_CLS:
 391              	.LFB137:
  70:Module/OLED/oled.c **** 
  71:Module/OLED/oled.c **** 
  72:Module/OLED/oled.c **** void OLED_CLS(void)//清屏
  73:Module/OLED/oled.c **** {
 392              		.loc 1 73 1 is_stmt 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396 0000 08B5     		push	{r3, lr}
 397              	.LCFI9:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 3, -8
 400              		.cfi_offset 14, -4
  74:Module/OLED/oled.c **** 	OLED_Fill(0x00);
 401              		.loc 1 74 2 view .LVU72
 402 0002 0020     		movs	r0, #0
 403 0004 FFF7FEFF 		bl	OLED_Fill
 404              	.LVL51:
  75:Module/OLED/oled.c **** }
 405              		.loc 1 75 1 is_stmt 0 view .LVU73
 406 0008 08BD     		pop	{r3, pc}
 407              		.cfi_endproc
 408              	.LFE137:
 410              		.section	.text.OLED_ON,"ax",%progbits
 411              		.align	1
 412              		.global	OLED_ON
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 417              	OLED_ON:
 418              	.LFB138:
  76:Module/OLED/oled.c **** 
  77:Module/OLED/oled.c **** void OLED_ON(void)
  78:Module/OLED/oled.c **** {
 419              		.loc 1 78 1 is_stmt 1 view -0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423 0000 08B5     		push	{r3, lr}
 424              	.LCFI10:
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 3, -8
 427              		.cfi_offset 14, -4
  79:Module/OLED/oled.c **** 	WriteCmd(0X8D);  //设置电荷泵
 428              		.loc 1 79 2 view .LVU75
 429 0002 8D20     		movs	r0, #141
 430 0004 FFF7FEFF 		bl	WriteCmd
 431              	.LVL52:
  80:Module/OLED/oled.c **** 	WriteCmd(0X14);  //开启电荷泵
 432              		.loc 1 80 2 view .LVU76
 433 0008 1420     		movs	r0, #20
 434 000a FFF7FEFF 		bl	WriteCmd
ARM GAS  /tmp/cc3HmRIO.s 			page 10


 435              	.LVL53:
  81:Module/OLED/oled.c **** 	WriteCmd(0XAF);  //OLED唤醒
 436              		.loc 1 81 2 view .LVU77
 437 000e AF20     		movs	r0, #175
 438 0010 FFF7FEFF 		bl	WriteCmd
 439              	.LVL54:
  82:Module/OLED/oled.c **** }
 440              		.loc 1 82 1 is_stmt 0 view .LVU78
 441 0014 08BD     		pop	{r3, pc}
 442              		.cfi_endproc
 443              	.LFE138:
 445              		.section	.text.OLED_OFF,"ax",%progbits
 446              		.align	1
 447              		.global	OLED_OFF
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 452              	OLED_OFF:
 453              	.LFB139:
  83:Module/OLED/oled.c **** 
  84:Module/OLED/oled.c **** void OLED_OFF(void)
  85:Module/OLED/oled.c **** {
 454              		.loc 1 85 1 is_stmt 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458 0000 08B5     		push	{r3, lr}
 459              	.LCFI11:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 3, -8
 462              		.cfi_offset 14, -4
  86:Module/OLED/oled.c **** 	WriteCmd(0X8D);  //设置电荷泵
 463              		.loc 1 86 2 view .LVU80
 464 0002 8D20     		movs	r0, #141
 465 0004 FFF7FEFF 		bl	WriteCmd
 466              	.LVL55:
  87:Module/OLED/oled.c **** 	WriteCmd(0X10);  //关闭电荷泵
 467              		.loc 1 87 2 view .LVU81
 468 0008 1020     		movs	r0, #16
 469 000a FFF7FEFF 		bl	WriteCmd
 470              	.LVL56:
  88:Module/OLED/oled.c **** 	WriteCmd(0XAE);  //OLED休眠
 471              		.loc 1 88 2 view .LVU82
 472 000e AE20     		movs	r0, #174
 473 0010 FFF7FEFF 		bl	WriteCmd
 474              	.LVL57:
  89:Module/OLED/oled.c **** }
 475              		.loc 1 89 1 is_stmt 0 view .LVU83
 476 0014 08BD     		pop	{r3, pc}
 477              		.cfi_endproc
 478              	.LFE139:
 480              		.section	.text.OLED_ShowStr,"ax",%progbits
 481              		.align	1
 482              		.global	OLED_ShowStr
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
ARM GAS  /tmp/cc3HmRIO.s 			page 11


 487              	OLED_ShowStr:
 488              	.LVL58:
 489              	.LFB140:
  90:Module/OLED/oled.c **** // Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); ch[] -- 要显示的字符串; TextSize
  91:Module/OLED/oled.c **** // Description    : 显示codetab.h中的ASCII字符,有6*8和8*16可选择
  92:Module/OLED/oled.c **** void OLED_ShowStr(unsigned char x, unsigned char y, unsigned char ch[], unsigned char TextSize)
  93:Module/OLED/oled.c **** {
 490              		.loc 1 93 1 is_stmt 1 view -0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		.loc 1 93 1 is_stmt 0 view .LVU85
 495 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 496              	.LCFI12:
 497              		.cfi_def_cfa_offset 32
 498              		.cfi_offset 3, -32
 499              		.cfi_offset 4, -28
 500              		.cfi_offset 5, -24
 501              		.cfi_offset 6, -20
 502              		.cfi_offset 7, -16
 503              		.cfi_offset 8, -12
 504              		.cfi_offset 9, -8
 505              		.cfi_offset 14, -4
 506 0004 0646     		mov	r6, r0
 507 0006 0F46     		mov	r7, r1
 508 0008 9046     		mov	r8, r2
  94:Module/OLED/oled.c **** 	unsigned char c = 0,i = 0,j = 0;
 509              		.loc 1 94 2 is_stmt 1 view .LVU86
 510              	.LVL59:
  95:Module/OLED/oled.c **** 	switch(TextSize)
 511              		.loc 1 95 2 view .LVU87
 512 000a 012B     		cmp	r3, #1
 513 000c 26D0     		beq	.L40
 514 000e 022B     		cmp	r3, #2
 515 0010 5AD0     		beq	.L41
 516              	.LVL60:
 517              	.L26:
  96:Module/OLED/oled.c **** 	{
  97:Module/OLED/oled.c **** 		case 1:
  98:Module/OLED/oled.c **** 		{
  99:Module/OLED/oled.c **** 			while(ch[j] != '\0')
 100:Module/OLED/oled.c **** 			{
 101:Module/OLED/oled.c **** 				c = ch[j] - 32;
 102:Module/OLED/oled.c **** 				if(x > 126)
 103:Module/OLED/oled.c **** 				{
 104:Module/OLED/oled.c **** 					x = 0;
 105:Module/OLED/oled.c **** 					y++;
 106:Module/OLED/oled.c **** 				}
 107:Module/OLED/oled.c **** 				OLED_SetPos(x,y);
 108:Module/OLED/oled.c **** 				for(i=0;i<6;i++)
 109:Module/OLED/oled.c **** 					WriteDat(F6x8[c][i]);
 110:Module/OLED/oled.c **** 				x += 6;
 111:Module/OLED/oled.c **** 				j++;
 112:Module/OLED/oled.c **** 			}
 113:Module/OLED/oled.c **** 		}break;
 114:Module/OLED/oled.c **** 		case 2:
 115:Module/OLED/oled.c **** 		{
ARM GAS  /tmp/cc3HmRIO.s 			page 12


 116:Module/OLED/oled.c **** 			while(ch[j] != '\0')
 117:Module/OLED/oled.c **** 			{
 118:Module/OLED/oled.c **** 				c = ch[j] - 32;
 119:Module/OLED/oled.c **** 				if(x > 120)
 120:Module/OLED/oled.c **** 				{
 121:Module/OLED/oled.c **** 					x = 0;
 122:Module/OLED/oled.c **** 					y++;
 123:Module/OLED/oled.c **** 				}
 124:Module/OLED/oled.c **** 				OLED_SetPos(x,y);
 125:Module/OLED/oled.c **** 				for(i=0;i<8;i++)
 126:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i]);
 127:Module/OLED/oled.c **** 				OLED_SetPos(x,y+1);
 128:Module/OLED/oled.c **** 				for(i=0;i<8;i++)
 129:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i+8]);
 130:Module/OLED/oled.c **** 				x += 8;
 131:Module/OLED/oled.c **** 				j++;
 132:Module/OLED/oled.c **** 			}
 133:Module/OLED/oled.c **** 		}break;
 134:Module/OLED/oled.c **** 	}
 135:Module/OLED/oled.c **** }
 518              		.loc 1 135 1 is_stmt 0 view .LVU88
 519 0012 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 520              	.LVL61:
 521              	.L32:
 109:Module/OLED/oled.c **** 				x += 6;
 522              		.loc 1 109 6 is_stmt 1 view .LVU89
 109:Module/OLED/oled.c **** 				x += 6;
 523              		.loc 1 109 22 is_stmt 0 view .LVU90
 524 0016 05EB4502 		add	r2, r5, r5, lsl #1
 525 001a 2D4B     		ldr	r3, .L43
 526 001c 03EB4203 		add	r3, r3, r2, lsl #1
 109:Module/OLED/oled.c **** 				x += 6;
 527              		.loc 1 109 6 view .LVU91
 528 0020 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 529 0022 FFF7FEFF 		bl	WriteDat
 530              	.LVL62:
 108:Module/OLED/oled.c **** 					WriteDat(F6x8[c][i]);
 531              		.loc 1 108 18 is_stmt 1 discriminator 3 view .LVU92
 532 0026 0134     		adds	r4, r4, #1
 533              	.LVL63:
 108:Module/OLED/oled.c **** 					WriteDat(F6x8[c][i]);
 534              		.loc 1 108 18 is_stmt 0 discriminator 3 view .LVU93
 535 0028 E4B2     		uxtb	r4, r4
 536              	.LVL64:
 537              	.L31:
 108:Module/OLED/oled.c **** 					WriteDat(F6x8[c][i]);
 538              		.loc 1 108 14 is_stmt 1 discriminator 1 view .LVU94
 539 002a 052C     		cmp	r4, #5
 540 002c F3D9     		bls	.L32
 110:Module/OLED/oled.c **** 				j++;
 541              		.loc 1 110 5 view .LVU95
 110:Module/OLED/oled.c **** 				j++;
 542              		.loc 1 110 7 is_stmt 0 view .LVU96
 543 002e 0636     		adds	r6, r6, #6
 544              	.LVL65:
 110:Module/OLED/oled.c **** 				j++;
 545              		.loc 1 110 7 view .LVU97
ARM GAS  /tmp/cc3HmRIO.s 			page 13


 546 0030 F6B2     		uxtb	r6, r6
 547              	.LVL66:
 111:Module/OLED/oled.c **** 			}
 548              		.loc 1 111 5 is_stmt 1 view .LVU98
 111:Module/OLED/oled.c **** 			}
 549              		.loc 1 111 6 is_stmt 0 view .LVU99
 550 0032 09F10109 		add	r9, r9, #1
 551              	.LVL67:
 111:Module/OLED/oled.c **** 			}
 552              		.loc 1 111 6 view .LVU100
 553 0036 5FFA89F9 		uxtb	r9, r9
 554              	.LVL68:
 555              	.L27:
  99:Module/OLED/oled.c **** 			{
 556              		.loc 1 99 16 is_stmt 1 view .LVU101
  99:Module/OLED/oled.c **** 			{
 557              		.loc 1 99 12 is_stmt 0 view .LVU102
 558 003a 18F80950 		ldrb	r5, [r8, r9]	@ zero_extendqisi2
  99:Module/OLED/oled.c **** 			{
 559              		.loc 1 99 16 view .LVU103
 560 003e 002D     		cmp	r5, #0
 561 0040 E7D0     		beq	.L26
 101:Module/OLED/oled.c **** 				if(x > 126)
 562              		.loc 1 101 5 is_stmt 1 view .LVU104
 101:Module/OLED/oled.c **** 				if(x > 126)
 563              		.loc 1 101 7 is_stmt 0 view .LVU105
 564 0042 203D     		subs	r5, r5, #32
 565 0044 EDB2     		uxtb	r5, r5
 566              	.LVL69:
 102:Module/OLED/oled.c **** 				{
 567              		.loc 1 102 5 is_stmt 1 view .LVU106
 102:Module/OLED/oled.c **** 				{
 568              		.loc 1 102 7 is_stmt 0 view .LVU107
 569 0046 7E2E     		cmp	r6, #126
 570 0048 02D9     		bls	.L30
 104:Module/OLED/oled.c **** 					y++;
 571              		.loc 1 104 6 is_stmt 1 view .LVU108
 572              	.LVL70:
 105:Module/OLED/oled.c **** 				}
 573              		.loc 1 105 6 view .LVU109
 105:Module/OLED/oled.c **** 				}
 574              		.loc 1 105 7 is_stmt 0 view .LVU110
 575 004a 0137     		adds	r7, r7, #1
 576              	.LVL71:
 105:Module/OLED/oled.c **** 				}
 577              		.loc 1 105 7 view .LVU111
 578 004c FFB2     		uxtb	r7, r7
 579              	.LVL72:
 104:Module/OLED/oled.c **** 					y++;
 580              		.loc 1 104 8 view .LVU112
 581 004e 0026     		movs	r6, #0
 582              	.LVL73:
 583              	.L30:
 107:Module/OLED/oled.c **** 				for(i=0;i<6;i++)
 584              		.loc 1 107 5 is_stmt 1 view .LVU113
 585 0050 3946     		mov	r1, r7
 586 0052 3046     		mov	r0, r6
ARM GAS  /tmp/cc3HmRIO.s 			page 14


 587 0054 FFF7FEFF 		bl	OLED_SetPos
 588              	.LVL74:
 108:Module/OLED/oled.c **** 					WriteDat(F6x8[c][i]);
 589              		.loc 1 108 5 view .LVU114
 108:Module/OLED/oled.c **** 					WriteDat(F6x8[c][i]);
 590              		.loc 1 108 10 is_stmt 0 view .LVU115
 591 0058 0024     		movs	r4, #0
 108:Module/OLED/oled.c **** 					WriteDat(F6x8[c][i]);
 592              		.loc 1 108 5 view .LVU116
 593 005a E6E7     		b	.L31
 594              	.LVL75:
 595              	.L40:
  95:Module/OLED/oled.c **** 	{
 596              		.loc 1 95 2 view .LVU117
 597 005c 4FF00009 		mov	r9, #0
 598 0060 EBE7     		b	.L27
 599              	.LVL76:
 600              	.L36:
 126:Module/OLED/oled.c **** 				OLED_SetPos(x,y+1);
 601              		.loc 1 126 6 is_stmt 1 view .LVU118
 126:Module/OLED/oled.c **** 				OLED_SetPos(x,y+1);
 602              		.loc 1 126 25 is_stmt 0 view .LVU119
 603 0062 04EB0513 		add	r3, r4, r5, lsl #4
 126:Module/OLED/oled.c **** 				OLED_SetPos(x,y+1);
 604              		.loc 1 126 6 view .LVU120
 605 0066 1B4A     		ldr	r2, .L43+4
 606 0068 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 607 006a FFF7FEFF 		bl	WriteDat
 608              	.LVL77:
 125:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i]);
 609              		.loc 1 125 18 is_stmt 1 discriminator 3 view .LVU121
 610 006e 0134     		adds	r4, r4, #1
 611              	.LVL78:
 125:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i]);
 612              		.loc 1 125 18 is_stmt 0 discriminator 3 view .LVU122
 613 0070 E4B2     		uxtb	r4, r4
 614              	.LVL79:
 615              	.L35:
 125:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i]);
 616              		.loc 1 125 14 is_stmt 1 discriminator 1 view .LVU123
 617 0072 072C     		cmp	r4, #7
 618 0074 F5D9     		bls	.L36
 127:Module/OLED/oled.c **** 				for(i=0;i<8;i++)
 619              		.loc 1 127 5 view .LVU124
 620 0076 791C     		adds	r1, r7, #1
 621 0078 C9B2     		uxtb	r1, r1
 622 007a 3046     		mov	r0, r6
 623 007c FFF7FEFF 		bl	OLED_SetPos
 624              	.LVL80:
 128:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i+8]);
 625              		.loc 1 128 5 view .LVU125
 128:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i+8]);
 626              		.loc 1 128 10 is_stmt 0 view .LVU126
 627 0080 0024     		movs	r4, #0
 128:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i+8]);
 628              		.loc 1 128 5 view .LVU127
 629 0082 08E0     		b	.L37
ARM GAS  /tmp/cc3HmRIO.s 			page 15


 630              	.LVL81:
 631              	.L38:
 129:Module/OLED/oled.c **** 				x += 8;
 632              		.loc 1 129 6 is_stmt 1 view .LVU128
 129:Module/OLED/oled.c **** 				x += 8;
 633              		.loc 1 129 25 is_stmt 0 view .LVU129
 634 0084 04EB0513 		add	r3, r4, r5, lsl #4
 129:Module/OLED/oled.c **** 				x += 8;
 635              		.loc 1 129 27 view .LVU130
 636 0088 0833     		adds	r3, r3, #8
 129:Module/OLED/oled.c **** 				x += 8;
 637              		.loc 1 129 6 view .LVU131
 638 008a 124A     		ldr	r2, .L43+4
 639 008c D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 640 008e FFF7FEFF 		bl	WriteDat
 641              	.LVL82:
 128:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i+8]);
 642              		.loc 1 128 18 is_stmt 1 discriminator 3 view .LVU132
 643 0092 0134     		adds	r4, r4, #1
 644              	.LVL83:
 128:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i+8]);
 645              		.loc 1 128 18 is_stmt 0 discriminator 3 view .LVU133
 646 0094 E4B2     		uxtb	r4, r4
 647              	.LVL84:
 648              	.L37:
 128:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i+8]);
 649              		.loc 1 128 14 is_stmt 1 discriminator 1 view .LVU134
 650 0096 072C     		cmp	r4, #7
 651 0098 F4D9     		bls	.L38
 130:Module/OLED/oled.c **** 				j++;
 652              		.loc 1 130 5 view .LVU135
 130:Module/OLED/oled.c **** 				j++;
 653              		.loc 1 130 7 is_stmt 0 view .LVU136
 654 009a 0836     		adds	r6, r6, #8
 655              	.LVL85:
 130:Module/OLED/oled.c **** 				j++;
 656              		.loc 1 130 7 view .LVU137
 657 009c F6B2     		uxtb	r6, r6
 658              	.LVL86:
 131:Module/OLED/oled.c **** 			}
 659              		.loc 1 131 5 is_stmt 1 view .LVU138
 131:Module/OLED/oled.c **** 			}
 660              		.loc 1 131 6 is_stmt 0 view .LVU139
 661 009e 09F10109 		add	r9, r9, #1
 662              	.LVL87:
 131:Module/OLED/oled.c **** 			}
 663              		.loc 1 131 6 view .LVU140
 664 00a2 5FFA89F9 		uxtb	r9, r9
 665              	.LVL88:
 666              	.L28:
 116:Module/OLED/oled.c **** 			{
 667              		.loc 1 116 16 is_stmt 1 view .LVU141
 116:Module/OLED/oled.c **** 			{
 668              		.loc 1 116 12 is_stmt 0 view .LVU142
 669 00a6 18F80950 		ldrb	r5, [r8, r9]	@ zero_extendqisi2
 116:Module/OLED/oled.c **** 			{
 670              		.loc 1 116 16 view .LVU143
ARM GAS  /tmp/cc3HmRIO.s 			page 16


 671 00aa 002D     		cmp	r5, #0
 672 00ac B1D0     		beq	.L26
 118:Module/OLED/oled.c **** 				if(x > 120)
 673              		.loc 1 118 5 is_stmt 1 view .LVU144
 118:Module/OLED/oled.c **** 				if(x > 120)
 674              		.loc 1 118 7 is_stmt 0 view .LVU145
 675 00ae 203D     		subs	r5, r5, #32
 676 00b0 EDB2     		uxtb	r5, r5
 677              	.LVL89:
 119:Module/OLED/oled.c **** 				{
 678              		.loc 1 119 5 is_stmt 1 view .LVU146
 119:Module/OLED/oled.c **** 				{
 679              		.loc 1 119 7 is_stmt 0 view .LVU147
 680 00b2 782E     		cmp	r6, #120
 681 00b4 02D9     		bls	.L34
 121:Module/OLED/oled.c **** 					y++;
 682              		.loc 1 121 6 is_stmt 1 view .LVU148
 683              	.LVL90:
 122:Module/OLED/oled.c **** 				}
 684              		.loc 1 122 6 view .LVU149
 122:Module/OLED/oled.c **** 				}
 685              		.loc 1 122 7 is_stmt 0 view .LVU150
 686 00b6 0137     		adds	r7, r7, #1
 687              	.LVL91:
 122:Module/OLED/oled.c **** 				}
 688              		.loc 1 122 7 view .LVU151
 689 00b8 FFB2     		uxtb	r7, r7
 690              	.LVL92:
 121:Module/OLED/oled.c **** 					y++;
 691              		.loc 1 121 8 view .LVU152
 692 00ba 0026     		movs	r6, #0
 693              	.LVL93:
 694              	.L34:
 124:Module/OLED/oled.c **** 				for(i=0;i<8;i++)
 695              		.loc 1 124 5 is_stmt 1 view .LVU153
 696 00bc 3946     		mov	r1, r7
 697 00be 3046     		mov	r0, r6
 698 00c0 FFF7FEFF 		bl	OLED_SetPos
 699              	.LVL94:
 125:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i]);
 700              		.loc 1 125 5 view .LVU154
 125:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i]);
 701              		.loc 1 125 10 is_stmt 0 view .LVU155
 702 00c4 0024     		movs	r4, #0
 125:Module/OLED/oled.c **** 					WriteDat(F8X16[c*16+i]);
 703              		.loc 1 125 5 view .LVU156
 704 00c6 D4E7     		b	.L35
 705              	.LVL95:
 706              	.L41:
  95:Module/OLED/oled.c **** 	{
 707              		.loc 1 95 2 view .LVU157
 708 00c8 4FF00009 		mov	r9, #0
 709 00cc EBE7     		b	.L28
 710              	.L44:
 711 00ce 00BF     		.align	2
 712              	.L43:
 713 00d0 00000000 		.word	F6x8
ARM GAS  /tmp/cc3HmRIO.s 			page 17


 714 00d4 00000000 		.word	F8X16
 715              		.cfi_endproc
 716              	.LFE140:
 718              		.section	.text.OLED_ShowChar,"ax",%progbits
 719              		.align	1
 720              		.global	OLED_ShowChar
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 725              	OLED_ShowChar:
 726              	.LVL96:
 727              	.LFB141:
 136:Module/OLED/oled.c **** // 显示单个字符
 137:Module/OLED/oled.c **** void OLED_ShowChar(unsigned char x, unsigned char y, unsigned char chr, unsigned char Char_Size)
 138:Module/OLED/oled.c **** {
 728              		.loc 1 138 1 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		.loc 1 138 1 is_stmt 0 view .LVU159
 733 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 734              	.LCFI13:
 735              		.cfi_def_cfa_offset 24
 736              		.cfi_offset 3, -24
 737              		.cfi_offset 4, -20
 738              		.cfi_offset 5, -16
 739              		.cfi_offset 6, -12
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 0002 0746     		mov	r7, r0
 743 0004 0E46     		mov	r6, r1
 139:Module/OLED/oled.c ****     unsigned char c = 0, i = 0;
 744              		.loc 1 139 5 is_stmt 1 view .LVU160
 745              	.LVL97:
 140:Module/OLED/oled.c ****     c = chr - ' '; // 获取字符的ASCII偏移值
 746              		.loc 1 140 5 view .LVU161
 747              		.loc 1 140 7 is_stmt 0 view .LVU162
 748 0006 203A     		subs	r2, r2, #32
 749              	.LVL98:
 750              		.loc 1 140 7 view .LVU163
 751 0008 D5B2     		uxtb	r5, r2
 752              	.LVL99:
 141:Module/OLED/oled.c ****     if (x > 128 - 1)
 753              		.loc 1 141 5 is_stmt 1 view .LVU164
 754              		.loc 1 141 8 is_stmt 0 view .LVU165
 755 000a 10F0800F 		tst	r0, #128
 756 000e 07D1     		bne	.L56
 757              	.LVL100:
 758              	.L46:
 142:Module/OLED/oled.c ****     {
 143:Module/OLED/oled.c ****         x = 0;
 144:Module/OLED/oled.c ****         y = y + 2;
 145:Module/OLED/oled.c ****     }
 146:Module/OLED/oled.c ****     if (Char_Size == 16)
 759              		.loc 1 146 5 is_stmt 1 view .LVU166
 760              		.loc 1 146 8 is_stmt 0 view .LVU167
 761 0010 102B     		cmp	r3, #16
ARM GAS  /tmp/cc3HmRIO.s 			page 18


 762 0012 09D0     		beq	.L57
 147:Module/OLED/oled.c ****     {
 148:Module/OLED/oled.c ****         OLED_SetPos(x, y);
 149:Module/OLED/oled.c ****         for (i = 0; i < 8; i++)
 150:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i]);
 151:Module/OLED/oled.c ****         OLED_SetPos(x, y + 1);
 152:Module/OLED/oled.c ****         for (i = 0; i < 8; i++)
 153:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i + 8]);
 154:Module/OLED/oled.c ****     }
 155:Module/OLED/oled.c ****     else
 156:Module/OLED/oled.c ****     {
 157:Module/OLED/oled.c ****         OLED_SetPos(x, y);
 763              		.loc 1 157 9 is_stmt 1 view .LVU168
 764 0014 3146     		mov	r1, r6
 765 0016 3846     		mov	r0, r7
 766 0018 FFF7FEFF 		bl	OLED_SetPos
 767              	.LVL101:
 158:Module/OLED/oled.c ****         for (i = 0; i < 6; i++)
 768              		.loc 1 158 9 view .LVU169
 769              		.loc 1 158 16 is_stmt 0 view .LVU170
 770 001c 0024     		movs	r4, #0
 771              		.loc 1 158 9 view .LVU171
 772 001e 30E0     		b	.L53
 773              	.LVL102:
 774              	.L56:
 143:Module/OLED/oled.c ****         y = y + 2;
 775              		.loc 1 143 9 is_stmt 1 view .LVU172
 144:Module/OLED/oled.c ****     }
 776              		.loc 1 144 9 view .LVU173
 144:Module/OLED/oled.c ****     }
 777              		.loc 1 144 11 is_stmt 0 view .LVU174
 778 0020 0236     		adds	r6, r6, #2
 779 0022 F6B2     		uxtb	r6, r6
 780              	.LVL103:
 143:Module/OLED/oled.c ****         y = y + 2;
 781              		.loc 1 143 11 view .LVU175
 782 0024 0027     		movs	r7, #0
 783 0026 F3E7     		b	.L46
 784              	.LVL104:
 785              	.L57:
 148:Module/OLED/oled.c ****         for (i = 0; i < 8; i++)
 786              		.loc 1 148 9 is_stmt 1 view .LVU176
 787 0028 3146     		mov	r1, r6
 788 002a 3846     		mov	r0, r7
 789 002c FFF7FEFF 		bl	OLED_SetPos
 790              	.LVL105:
 149:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i]);
 791              		.loc 1 149 9 view .LVU177
 149:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i]);
 792              		.loc 1 149 16 is_stmt 0 view .LVU178
 793 0030 0024     		movs	r4, #0
 149:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i]);
 794              		.loc 1 149 9 view .LVU179
 795 0032 07E0     		b	.L48
 796              	.LVL106:
 797              	.L49:
 150:Module/OLED/oled.c ****         OLED_SetPos(x, y + 1);
ARM GAS  /tmp/cc3HmRIO.s 			page 19


 798              		.loc 1 150 13 is_stmt 1 view .LVU180
 150:Module/OLED/oled.c ****         OLED_SetPos(x, y + 1);
 799              		.loc 1 150 35 is_stmt 0 view .LVU181
 800 0034 04EB0513 		add	r3, r4, r5, lsl #4
 150:Module/OLED/oled.c ****         OLED_SetPos(x, y + 1);
 801              		.loc 1 150 13 view .LVU182
 802 0038 134A     		ldr	r2, .L58
 803 003a D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 804 003c FFF7FEFF 		bl	WriteDat
 805              	.LVL107:
 149:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i]);
 806              		.loc 1 149 29 is_stmt 1 discriminator 3 view .LVU183
 807 0040 0134     		adds	r4, r4, #1
 808              	.LVL108:
 149:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i]);
 809              		.loc 1 149 29 is_stmt 0 discriminator 3 view .LVU184
 810 0042 E4B2     		uxtb	r4, r4
 811              	.LVL109:
 812              	.L48:
 149:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i]);
 813              		.loc 1 149 23 is_stmt 1 discriminator 1 view .LVU185
 814 0044 072C     		cmp	r4, #7
 815 0046 F5D9     		bls	.L49
 151:Module/OLED/oled.c ****         for (i = 0; i < 8; i++)
 816              		.loc 1 151 9 view .LVU186
 817 0048 711C     		adds	r1, r6, #1
 818 004a C9B2     		uxtb	r1, r1
 819 004c 3846     		mov	r0, r7
 820 004e FFF7FEFF 		bl	OLED_SetPos
 821              	.LVL110:
 152:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i + 8]);
 822              		.loc 1 152 9 view .LVU187
 152:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i + 8]);
 823              		.loc 1 152 16 is_stmt 0 view .LVU188
 824 0052 0024     		movs	r4, #0
 152:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i + 8]);
 825              		.loc 1 152 9 view .LVU189
 826 0054 08E0     		b	.L50
 827              	.LVL111:
 828              	.L51:
 153:Module/OLED/oled.c ****     }
 829              		.loc 1 153 13 is_stmt 1 view .LVU190
 153:Module/OLED/oled.c ****     }
 830              		.loc 1 153 35 is_stmt 0 view .LVU191
 831 0056 04EB0513 		add	r3, r4, r5, lsl #4
 153:Module/OLED/oled.c ****     }
 832              		.loc 1 153 39 view .LVU192
 833 005a 0833     		adds	r3, r3, #8
 153:Module/OLED/oled.c ****     }
 834              		.loc 1 153 13 view .LVU193
 835 005c 0A4A     		ldr	r2, .L58
 836 005e D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 837 0060 FFF7FEFF 		bl	WriteDat
 838              	.LVL112:
 152:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i + 8]);
 839              		.loc 1 152 29 is_stmt 1 discriminator 3 view .LVU194
 840 0064 0134     		adds	r4, r4, #1
ARM GAS  /tmp/cc3HmRIO.s 			page 20


 841              	.LVL113:
 152:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i + 8]);
 842              		.loc 1 152 29 is_stmt 0 discriminator 3 view .LVU195
 843 0066 E4B2     		uxtb	r4, r4
 844              	.LVL114:
 845              	.L50:
 152:Module/OLED/oled.c ****             WriteDat(F8X16[c * 16 + i + 8]);
 846              		.loc 1 152 23 is_stmt 1 discriminator 1 view .LVU196
 847 0068 072C     		cmp	r4, #7
 848 006a F4D9     		bls	.L51
 849 006c 0BE0     		b	.L45
 850              	.L54:
 159:Module/OLED/oled.c ****             WriteDat(F6x8[c][i]);
 851              		.loc 1 159 13 view .LVU197
 852              		.loc 1 159 29 is_stmt 0 view .LVU198
 853 006e 05EB4502 		add	r2, r5, r5, lsl #1
 854 0072 064B     		ldr	r3, .L58+4
 855 0074 03EB4203 		add	r3, r3, r2, lsl #1
 856              		.loc 1 159 13 view .LVU199
 857 0078 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 858 007a FFF7FEFF 		bl	WriteDat
 859              	.LVL115:
 158:Module/OLED/oled.c ****             WriteDat(F6x8[c][i]);
 860              		.loc 1 158 29 is_stmt 1 discriminator 3 view .LVU200
 861 007e 0134     		adds	r4, r4, #1
 862              	.LVL116:
 158:Module/OLED/oled.c ****             WriteDat(F6x8[c][i]);
 863              		.loc 1 158 29 is_stmt 0 discriminator 3 view .LVU201
 864 0080 E4B2     		uxtb	r4, r4
 865              	.LVL117:
 866              	.L53:
 158:Module/OLED/oled.c ****             WriteDat(F6x8[c][i]);
 867              		.loc 1 158 23 is_stmt 1 discriminator 1 view .LVU202
 868 0082 052C     		cmp	r4, #5
 869 0084 F3D9     		bls	.L54
 870              	.L45:
 160:Module/OLED/oled.c ****     }
 161:Module/OLED/oled.c **** }
 871              		.loc 1 161 1 is_stmt 0 view .LVU203
 872 0086 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 873              	.LVL118:
 874              	.L59:
 875              		.loc 1 161 1 view .LVU204
 876              		.align	2
 877              	.L58:
 878 0088 00000000 		.word	F8X16
 879 008c 00000000 		.word	F6x8
 880              		.cfi_endproc
 881              	.LFE141:
 883              		.section	.text.oled_pow,"ax",%progbits
 884              		.align	1
 885              		.global	oled_pow
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 890              	oled_pow:
 891              	.LVL119:
ARM GAS  /tmp/cc3HmRIO.s 			page 21


 892              	.LFB142:
 162:Module/OLED/oled.c **** 
 163:Module/OLED/oled.c **** // 计算m的n次方
 164:Module/OLED/oled.c **** u32 oled_pow(unsigned char m, unsigned char n)
 165:Module/OLED/oled.c **** {
 893              		.loc 1 165 1 is_stmt 1 view -0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898              		.loc 1 165 1 is_stmt 0 view .LVU206
 899 0000 0246     		mov	r2, r0
 166:Module/OLED/oled.c ****     u32 result = 1;
 900              		.loc 1 166 5 is_stmt 1 view .LVU207
 901              	.LVL120:
 167:Module/OLED/oled.c ****     while (n--)
 902              		.loc 1 167 5 view .LVU208
 166:Module/OLED/oled.c ****     u32 result = 1;
 903              		.loc 1 166 9 is_stmt 0 view .LVU209
 904 0002 0120     		movs	r0, #1
 905              	.LVL121:
 906              		.loc 1 167 11 view .LVU210
 907 0004 02E0     		b	.L61
 908              	.LVL122:
 909              	.L62:
 168:Module/OLED/oled.c ****         result *= m;
 910              		.loc 1 168 9 is_stmt 1 view .LVU211
 911              		.loc 1 168 16 is_stmt 0 view .LVU212
 912 0006 02FB00F0 		mul	r0, r2, r0
 913              	.LVL123:
 167:Module/OLED/oled.c ****     while (n--)
 914              		.loc 1 167 13 view .LVU213
 915 000a 1946     		mov	r1, r3
 916              	.LVL124:
 917              	.L61:
 167:Module/OLED/oled.c ****     while (n--)
 918              		.loc 1 167 12 is_stmt 1 view .LVU214
 167:Module/OLED/oled.c ****     while (n--)
 919              		.loc 1 167 13 is_stmt 0 view .LVU215
 920 000c 4B1E     		subs	r3, r1, #1
 921 000e DBB2     		uxtb	r3, r3
 922              	.LVL125:
 167:Module/OLED/oled.c ****     while (n--)
 923              		.loc 1 167 12 view .LVU216
 924 0010 0029     		cmp	r1, #0
 925 0012 F8D1     		bne	.L62
 169:Module/OLED/oled.c ****     return result;
 926              		.loc 1 169 5 is_stmt 1 view .LVU217
 170:Module/OLED/oled.c **** }
 927              		.loc 1 170 1 is_stmt 0 view .LVU218
 928 0014 7047     		bx	lr
 929              		.cfi_endproc
 930              	.LFE142:
 932              		.section	.text.OLED_ShowNum,"ax",%progbits
 933              		.align	1
 934              		.global	OLED_ShowNum
 935              		.syntax unified
ARM GAS  /tmp/cc3HmRIO.s 			page 22


 936              		.thumb
 937              		.thumb_func
 939              	OLED_ShowNum:
 940              	.LVL126:
 941              	.LFB143:
 171:Module/OLED/oled.c **** 
 172:Module/OLED/oled.c **** // 显示数字
 173:Module/OLED/oled.c **** void OLED_ShowNum(unsigned char x, unsigned char y, u32 num, unsigned char len, unsigned char size2
 174:Module/OLED/oled.c **** {
 942              		.loc 1 174 1 is_stmt 1 view -0
 943              		.cfi_startproc
 944              		@ args = 4, pretend = 0, frame = 0
 945              		@ frame_needed = 0, uses_anonymous_args = 0
 946              		.loc 1 174 1 is_stmt 0 view .LVU220
 947 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 948              	.LCFI14:
 949              		.cfi_def_cfa_offset 32
 950              		.cfi_offset 4, -32
 951              		.cfi_offset 5, -28
 952              		.cfi_offset 6, -24
 953              		.cfi_offset 7, -20
 954              		.cfi_offset 8, -16
 955              		.cfi_offset 9, -12
 956              		.cfi_offset 10, -8
 957              		.cfi_offset 14, -4
 958 0004 8246     		mov	r10, r0
 959 0006 8946     		mov	r9, r1
 960 0008 9046     		mov	r8, r2
 961 000a 1D46     		mov	r5, r3
 962 000c 9DF82060 		ldrb	r6, [sp, #32]	@ zero_extendqisi2
 175:Module/OLED/oled.c ****     unsigned char t, temp;
 963              		.loc 1 175 5 is_stmt 1 view .LVU221
 176:Module/OLED/oled.c ****     unsigned char enshow = 0;
 964              		.loc 1 176 5 view .LVU222
 965              	.LVL127:
 177:Module/OLED/oled.c ****     for (t = 0; t < len; t++)
 966              		.loc 1 177 5 view .LVU223
 176:Module/OLED/oled.c ****     unsigned char enshow = 0;
 967              		.loc 1 176 19 is_stmt 0 view .LVU224
 968 0010 0027     		movs	r7, #0
 969              		.loc 1 177 12 view .LVU225
 970 0012 3C46     		mov	r4, r7
 971              		.loc 1 177 5 view .LVU226
 972 0014 19E0     		b	.L64
 973              	.LVL128:
 974              	.L71:
 178:Module/OLED/oled.c ****     {
 179:Module/OLED/oled.c ****         temp = (num / oled_pow(10, len - t - 1)) % 10;
 180:Module/OLED/oled.c ****         if (enshow == 0 && t < (len - 1))
 181:Module/OLED/oled.c ****         {
 182:Module/OLED/oled.c ****             if (temp == 0)
 183:Module/OLED/oled.c ****             {
 184:Module/OLED/oled.c ****                 OLED_ShowChar(x + (size2 / 2) * t, y, ' ', size2); // 显示空格
 975              		.loc 1 184 17 is_stmt 1 view .LVU227
 976              		.loc 1 184 47 is_stmt 0 view .LVU228
 977 0016 7008     		lsrs	r0, r6, #1
 978 0018 10FB04F0 		smulbb	r0, r0, r4
ARM GAS  /tmp/cc3HmRIO.s 			page 23


 979              		.loc 1 184 17 view .LVU229
 980 001c 5AFA80F0 		uxtab	r0, r10, r0
 981 0020 3346     		mov	r3, r6
 982 0022 2022     		movs	r2, #32
 983              	.LVL129:
 984              		.loc 1 184 17 view .LVU230
 985 0024 4946     		mov	r1, r9
 986 0026 C0B2     		uxtb	r0, r0
 987 0028 FFF7FEFF 		bl	OLED_ShowChar
 988              	.LVL130:
 185:Module/OLED/oled.c ****                 continue;
 989              		.loc 1 185 17 is_stmt 1 view .LVU231
 990 002c 0BE0     		b	.L66
 991              	.LVL131:
 992              	.L65:
 186:Module/OLED/oled.c ****             }
 187:Module/OLED/oled.c ****             else
 188:Module/OLED/oled.c ****                 enshow = 1;
 189:Module/OLED/oled.c ****         }
 190:Module/OLED/oled.c ****         OLED_ShowChar(x + (size2 / 2) * t, y, temp + '0', size2); // 显示数字
 993              		.loc 1 190 9 view .LVU232
 994              		.loc 1 190 39 is_stmt 0 view .LVU233
 995 002e 7008     		lsrs	r0, r6, #1
 996 0030 10FB04F0 		smulbb	r0, r0, r4
 997              		.loc 1 190 9 view .LVU234
 998 0034 3032     		adds	r2, r2, #48
 999              	.LVL132:
 1000              		.loc 1 190 9 view .LVU235
 1001 0036 5AFA80F0 		uxtab	r0, r10, r0
 1002 003a 3346     		mov	r3, r6
 1003 003c D2B2     		uxtb	r2, r2
 1004              	.LVL133:
 1005              		.loc 1 190 9 view .LVU236
 1006 003e 4946     		mov	r1, r9
 1007 0040 C0B2     		uxtb	r0, r0
 1008 0042 FFF7FEFF 		bl	OLED_ShowChar
 1009              	.LVL134:
 1010              	.L66:
 177:Module/OLED/oled.c ****     {
 1011              		.loc 1 177 27 is_stmt 1 discriminator 2 view .LVU237
 1012 0046 0134     		adds	r4, r4, #1
 1013              	.LVL135:
 177:Module/OLED/oled.c ****     {
 1014              		.loc 1 177 27 is_stmt 0 discriminator 2 view .LVU238
 1015 0048 E4B2     		uxtb	r4, r4
 1016              	.LVL136:
 1017              	.L64:
 177:Module/OLED/oled.c ****     {
 1018              		.loc 1 177 19 is_stmt 1 discriminator 1 view .LVU239
 1019 004a AC42     		cmp	r4, r5
 1020 004c 1CD2     		bcs	.L70
 179:Module/OLED/oled.c ****         if (enshow == 0 && t < (len - 1))
 1021              		.loc 1 179 9 view .LVU240
 179:Module/OLED/oled.c ****         if (enshow == 0 && t < (len - 1))
 1022              		.loc 1 179 40 is_stmt 0 view .LVU241
 1023 004e 291B     		subs	r1, r5, r4
 1024 0050 C9B2     		uxtb	r1, r1
ARM GAS  /tmp/cc3HmRIO.s 			page 24


 179:Module/OLED/oled.c ****         if (enshow == 0 && t < (len - 1))
 1025              		.loc 1 179 23 view .LVU242
 1026 0052 0139     		subs	r1, r1, #1
 1027 0054 C9B2     		uxtb	r1, r1
 1028 0056 0A20     		movs	r0, #10
 1029 0058 FFF7FEFF 		bl	oled_pow
 1030              	.LVL137:
 179:Module/OLED/oled.c ****         if (enshow == 0 && t < (len - 1))
 1031              		.loc 1 179 21 discriminator 1 view .LVU243
 1032 005c B8FBF0F0 		udiv	r0, r8, r0
 179:Module/OLED/oled.c ****         if (enshow == 0 && t < (len - 1))
 1033              		.loc 1 179 50 discriminator 1 view .LVU244
 1034 0060 0A4B     		ldr	r3, .L72
 1035 0062 A3FB003C 		umull	r3, ip, r3, r0
 1036 0066 4FEADC0C 		lsr	ip, ip, #3
 1037 006a 0CEB8C0C 		add	ip, ip, ip, lsl #2
 1038 006e A0EB4C0C 		sub	ip, r0, ip, lsl #1
 179:Module/OLED/oled.c ****         if (enshow == 0 && t < (len - 1))
 1039              		.loc 1 179 14 discriminator 1 view .LVU245
 1040 0072 5FFA8CF2 		uxtb	r2, ip
 1041              	.LVL138:
 180:Module/OLED/oled.c ****         {
 1042              		.loc 1 180 9 is_stmt 1 view .LVU246
 180:Module/OLED/oled.c ****         {
 1043              		.loc 1 180 12 is_stmt 0 view .LVU247
 1044 0076 002F     		cmp	r7, #0
 1045 0078 D9D1     		bne	.L65
 180:Module/OLED/oled.c ****         {
 1046              		.loc 1 180 37 discriminator 1 view .LVU248
 1047 007a 6B1E     		subs	r3, r5, #1
 180:Module/OLED/oled.c ****         {
 1048              		.loc 1 180 25 discriminator 1 view .LVU249
 1049 007c 9C42     		cmp	r4, r3
 1050 007e D6DA     		bge	.L65
 182:Module/OLED/oled.c ****             {
 1051              		.loc 1 182 13 is_stmt 1 view .LVU250
 182:Module/OLED/oled.c ****             {
 1052              		.loc 1 182 16 is_stmt 0 view .LVU251
 1053 0080 002A     		cmp	r2, #0
 1054 0082 C8D0     		beq	.L71
 188:Module/OLED/oled.c ****         }
 1055              		.loc 1 188 24 view .LVU252
 1056 0084 0127     		movs	r7, #1
 1057              	.LVL139:
 188:Module/OLED/oled.c ****         }
 1058              		.loc 1 188 24 view .LVU253
 1059 0086 D2E7     		b	.L65
 1060              	.LVL140:
 1061              	.L70:
 191:Module/OLED/oled.c ****     }
 192:Module/OLED/oled.c **** }...
 1062              		.loc 1 192 1 view .LVU254
 1063 0088 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1064              	.LVL141:
 1065              	.L73:
 1066              		.loc 1 192 1 view .LVU255
 1067              		.align	2
ARM GAS  /tmp/cc3HmRIO.s 			page 25


 1068              	.L72:
 1069 008c CDCCCCCC 		.word	-858993459
 1070              		.cfi_endproc
 1071              	.LFE143:
 1073              		.global	F8X16
 1074              		.section	.rodata.F8X16,"a"
 1075              		.align	2
 1078              	F8X16:
 1079 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1079      00000000 
 1079      00000000 
 1079      00
 1080 000d 00000000 		.ascii	"\000\000\000\000\000\000\370\000\000\000\000\000\000"
 1080      0000F800 
 1080      00000000 
 1080      00
 1081 001a 00333000 		.ascii	"\00030\000\000\000\000\020\014\006\020\014\006\000\000"
 1081      00000010 
 1081      0C06100C 
 1081      060000
 1082 0029 00000000 		.ascii	"\000\000\000\000\000\000\000@\300x@\300x@\000\004?\004"
 1082      00000040 
 1082      C07840C0 
 1082      78400004 
 1082      3F04
 1083 003b 043F0404 		.ascii	"\004?\004\004\000\000p\210\374\0100\000\000\000\030"
 1083      00007088 
 1083      FC083000 
 1083      000018
 1084 004a 20FF211E 		.ascii	" \377!\036\000\000\360\010\360\000\340\030\000\000\000"
 1084      0000F008 
 1084      F000E018 
 1084      000000
 1085 0059 211C031E 		.ascii	"!\034\003\036!\036\000\000\360\010\210p\000\000\000"
 1085      211E0000 
 1085      F0088870 
 1085      000000
 1086 0068 1E212324 		.ascii	"\036!#$\031'!\020\020\026\016\000\000\000\000\000\000"
 1086      19272110 
 1086      10160E00 
 1086      00000000 
 1086      00
 1087 0079 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\340\030\004"
 1087      00000000 
 1087      0000E018 
 1087      04
 1088 0086 02000000 		.ascii	"\002\000\000\000\000\007\030 @\000\000\002\004\030\340"
 1088      00071820 
 1088      40000002 
 1088      0418E0
 1089 0095 00000000 		.ascii	"\000\000\000\000@ \030\007\000\000\000@@\200\360\200"
 1089      40201807 
 1089      00000040 
 1089      4080F080 
 1090 00a5 40400002 		.ascii	"@@\000\002\002\001\017\001\002\002\000\000\000\000\360"
 1090      02010F01 
 1090      02020000 
ARM GAS  /tmp/cc3HmRIO.s 			page 26


 1090      0000F0
 1091 00b4 00000000 		.ascii	"\000\000\000\000\001\001\001\037\001\001\001\000\000"
 1091      0101011F 
 1091      01010100 
 1091      00
 1092 00c1 00000000 		.ascii	"\000\000\000\000\000\000\000\200\260p\000\000\000\000"
 1092      00000080 
 1092      B0700000 
 1092      0000
 1093 00cf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\001\001"
 1093      00000000 
 1093      00000101 
 1093      01
 1094 00dc 01010101 		.ascii	"\001\001\001\001\000\000\000\000\000\000\000\000\000"
 1094      00000000 
 1094      00000000 
 1094      00
 1095 00e9 30300000 		.ascii	"00\000\000\000\000\000\000\000\000\000\200`\030\004"
 1095      00000000 
 1095      00000080 
 1095      601804
 1096 00f8 00601806 		.ascii	"\000`\030\006\001\000\000\000\000\340\020\010\010\020"
 1096      01000000 
 1096      00E01008 
 1096      0810
 1097 0106 E000000F 		.ascii	"\340\000\000\017\020  \020\017\000\000\020\020\370\000"
 1097      10202010 
 1097      0F000010 
 1097      10F800
 1098 0115 00000000 		.ascii	"\000\000\000\000  ?  \000\000\000p\010\010\010\210p"
 1098      20203F20 
 1098      20000000 
 1098      70080808 
 1098      8870
 1099 0127 00003028 		.ascii	"\000\0000($\"!0\000\0000\010\210\210H0\000\000\030 "
 1099      24222130 
 1099      00003008 
 1099      88884830 
 1099      00001820 
 1100 013b 2020110E 		.ascii	"  \021\016\000\000\000\300 \020\370\000\000\000\007"
 1100      000000C0 
 1100      2010F800 
 1100      000007
 1101 014a 0424243F 		.ascii	"\004$$?$\000\000\370\010\210\210\010\010\000\000\031"
 1101      240000F8 
 1101      08888808 
 1101      08000019 
 1102 015a 21202011 		.ascii	"!  \021\016\000\000\340\020\210\210\030\000\000\000"
 1102      0E0000E0 
 1102      10888818 
 1102      000000
 1103 0169 0F112020 		.ascii	"\017\021  \021\016\000\0008\010\010\3108\010\000\000"
 1103      110E0000 
 1103      380808C8 
 1103      38080000 
 1104 0179 00003F00 		.ascii	"\000\000?\000\000\000\000\000p\210\010\010\210p\000"
 1104      00000000 
ARM GAS  /tmp/cc3HmRIO.s 			page 27


 1104      70880808 
 1104      887000
 1105 0188 001C2221 		.ascii	"\000\034\"!!\"\034\000\000\340\020\010\010\020\340\000"
 1105      21221C00 
 1105      00E01008 
 1105      0810E000 
 1106 0198 00003122 		.ascii	"\000\0001\"\"\021\017\000\000\000\000\300\300\000\000"
 1106      22110F00 
 1106      000000C0 
 1106      C00000
 1107 01a7 00000000 		.ascii	"\000\000\000\00000\000\000\000\000\000\000\200\000\000"
 1107      30300000 
 1107      00000000 
 1107      800000
 1108 01b6 00000000 		.ascii	"\000\000\000\000\200`\000\000\000\000\000\000\200@ "
 1108      80600000 
 1108      00000000 
 1108      804020
 1109 01c5 10080000 		.ascii	"\020\010\000\000\001\002\004\010\020 \000@@@@@@@\000"
 1109      01020408 
 1109      10200040 
 1109      40404040 
 1109      404000
 1110 01d8 04040404 		.ascii	"\004\004\004\004\004\004\004\000\000\010\020 @\200\000"
 1110      04040400 
 1110      00081020 
 1110      408000
 1111 01e7 00002010 		.ascii	"\000\000 \020\010\004\002\001\000\000pH\010\010\010"
 1111      08040201 
 1111      00007048 
 1111      080808
 1112 01f6 F0000000 		.ascii	"\360\000\000\000\00006\001\000\000\3000\310(\350\020"
 1112      00303601 
 1112      0000C030 
 1112      C828E810 
 1113 0206 E0000718 		.ascii	"\340\000\007\030'$#\024\013\000\000\000\3008\340\000"
 1113      27242314 
 1113      0B000000 
 1113      C038E000 
 1114 0216 0000203C 		.ascii	"\000\000 <#\002\002'8 \010\370\210\210\210p\000\000"
 1114      23020227 
 1114      382008F8 
 1114      88888870 
 1114      0000
 1115 0228 203F2020 		.ascii	" ?   \021\016\000\3000\010\010\010\0108\000\007\030"
 1115      20110E00 
 1115      C0300808 
 1115      08083800 
 1115      0718
 1116 023a 20202010 		.ascii	"   \020\010\000\010\370\010\010\010\020\340\000 ?  "
 1116      080008F8 
 1116      08080810 
 1116      E000203F 
 1116      2020
 1117 024c 20100F00 		.ascii	" \020\017\000\010\370\210\210\350\010\020\000 ?  # "
 1117      08F88888 
 1117      E8081000 
ARM GAS  /tmp/cc3HmRIO.s 			page 28


 1117      203F2020 
 1117      2320
 1118 025e 180008F8 		.ascii	"\030\000\010\370\210\210\350\010\020\000 ? \000\003"
 1118      8888E808 
 1118      1000203F 
 1118      200003
 1119 026d 000000C0 		.ascii	"\000\000\000\3000\010\010\0108\000\000\007\030  \"\036"
 1119      30080808 
 1119      38000007 
 1119      18202022 
 1119      1E
 1120 027e 020008F8 		.ascii	"\002\000\010\370\010\000\000\010\370\010 ?!\001\001"
 1120      08000008 
 1120      F808203F 
 1120      210101
 1121 028d 213F2000 		.ascii	"!? \000\010\010\370\010\010\000\000\000  ?  \000\000"
 1121      0808F808 
 1121      08000000 
 1121      20203F20 
 1121      200000
 1122 02a0 00000808 		.ascii	"\000\000\010\010\370\010\010\000\300\200\200\200\177"
 1122      F8080800 
 1122      C0808080 
 1122      7F
 1123 02ad 00000008 		.ascii	"\000\000\000\010\370\210\300(\030\010\000 ? \001&8 "
 1123      F888C028 
 1123      18080020 
 1123      3F200126 
 1123      3820
 1124 02bf 0008F808 		.ascii	"\000\010\370\010\000\000\000\000\000 ?    0\000\010"
 1124      00000000 
 1124      00203F20 
 1124      20202030 
 1124      0008
 1125 02d1 F8F800F8 		.ascii	"\370\370\000\370\370\010\000 ?\000?\000? \000\010\370"
 1125      F8080020 
 1125      3F003F00 
 1125      3F200008 
 1125      F8
 1126 02e2 30C00008 		.ascii	"0\300\000\010\370\010 ? \000\007\030?\000\340\020\010"
 1126      F808203F 
 1126      20000718 
 1126      3F00E010 
 1126      08
 1127 02f3 080810E0 		.ascii	"\010\010\020\340\000\017\020   \020\017\000\010\370"
 1127      000F1020 
 1127      2020100F 
 1127      0008F8
 1128 0302 08080808 		.ascii	"\010\010\010\010\360\000 ?!\001\001\001\000\000\340"
 1128      F000203F 
 1128      21010101 
 1128      0000E0
 1129 0311 10080808 		.ascii	"\020\010\010\010\020\340\000\017\030$$8PO\000\010\370"
 1129      10E0000F 
 1129      18242438 
 1129      504F0008 
 1129      F8
ARM GAS  /tmp/cc3HmRIO.s 			page 29


 1130 0322 88888888 		.ascii	"\210\210\210\210p\000 ? \000\003\0140 \000p\210\010"
 1130      7000203F 
 1130      2000030C 
 1130      30200070 
 1130      8808
 1131 0334 08083800 		.ascii	"\010\0108\000\0008 !!\"\034\000\030\010\010\370\010"
 1131      00382021 
 1131      21221C00 
 1131      180808F8 
 1131      08
 1132 0345 08180000 		.ascii	"\010\030\000\000\000 ? \000\000\000\010\370\010\000"
 1132      00203F20 
 1132      00000008 
 1132      F80800
 1133 0354 0008F808 		.ascii	"\000\010\370\010\000\037    \037\000\010x\210\000\000"
 1133      001F2020 
 1133      20201F00 
 1133      08788800 
 1133      00
 1134 0365 C8380800 		.ascii	"\3108\010\000\000\0078\016\001\000\000\370\010\000\370"
 1134      0007380E 
 1134      010000F8 
 1134      0800F8
 1135 0374 0008F800 		.ascii	"\000\010\370\000\003<\007\000\007<\003\000\010\030h"
 1135      033C0700 
 1135      073C0300 
 1135      081868
 1136 0383 80806818 		.ascii	"\200\200h\030\010 0,\003\003,0 \0108\310\000\3108\010"
 1136      0820302C 
 1136      03032C30 
 1136      200838C8 
 1136      00C83808 
 1137 0397 00000020 		.ascii	"\000\000\000 ? \000\000\000\020\010\010\010\3108\010"
 1137      3F200000 
 1137      00100808 
 1137      08C83808 
 1138 03a7 00203826 		.ascii	"\000 8&!  \030\000\000\000\000\376\002\002\002\000\000"
 1138      21202018 
 1138      00000000 
 1138      FE020202 
 1138      0000
 1139 03b9 00007F40 		.ascii	"\000\000\177@@@\000\000\0140\300\000\000\000\000\000"
 1139      40400000 
 1139      0C30C000 
 1139      00000000 
 1140 03c9 00000106 		.ascii	"\000\000\001\0068\300\000\000\002\002\002\376\000\000"
 1140      38C00000 
 1140      020202FE 
 1140      0000
 1141 03d7 00004040 		.ascii	"\000\000@@@\177\000\000\000\000\000\004\002\002\002"
 1141      407F0000 
 1141      00000004 
 1141      020202
 1142 03e6 04000000 		.ascii	"\004\000\000\000\000\000\000\000\000\000\000\000\000"
 1142      00000000 
 1142      00000000 
 1142      00
ARM GAS  /tmp/cc3HmRIO.s 			page 30


 1143 03f3 00000000 		.ascii	"\000\000\000\000\000\200\200\200\200\200\200\200\200"
 1143      00808080 
 1143      80808080 
 1143      80
 1144 0400 00020204 		.ascii	"\000\002\002\004\000\000\000\000\000\000\000\000\000"
 1144      00000000 
 1144      00000000 
 1144      00
 1145 040d 00000000 		.ascii	"\000\000\000\000\000\200\200\200\200\000\000\000\031"
 1145      00808080 
 1145      80000000 
 1145      19
 1146 041a 24222222 		.ascii	"$\"\"\"? \010\370\000\200\200\000\000\000\000?\021 "
 1146      3F2008F8 
 1146      00808000 
 1146      0000003F 
 1146      1120
 1147 042c 20110E00 		.ascii	" \021\016\000\000\000\000\200\200\200\000\000\000\016"
 1147      00000080 
 1147      80800000 
 1147      000E
 1148 043a 11202020 		.ascii	"\021   \021\000\000\000\000\200\200\210\370\000\000"
 1148      11000000 
 1148      00808088 
 1148      F80000
 1149 0449 0E112020 		.ascii	"\016\021  \020? \000\000\200\200\200\200\000\000\000"
 1149      103F2000 
 1149      00808080 
 1149      80000000 
 1150 0459 1F222222 		.ascii	"\037\"\"\"\"\023\000\000\200\200\360\210\210\210\030"
 1150      22130000 
 1150      8080F088 
 1150      888818
 1151 0468 0020203F 		.ascii	"\000  ?  \000\000\000\000\200\200\200\200\200\000\000"
 1151      20200000 
 1151      00008080 
 1151      80808000 
 1151      00
 1152 0479 6B949494 		.ascii	"k\224\224\224\223`\000\010\370\000\200\200\200\000\000"
 1152      93600008 
 1152      F8008080 
 1152      800000
 1153 0488 203F2100 		.ascii	" ?!\000\000 ? \000\200\230\230\000\000\000\000\000 "
 1153      00203F20 
 1153      00809898 
 1153      00000000 
 1153      0020
 1154 049a 203F2020 		.ascii	" ?  \000\000\000\000\000\200\230\230\000\000\000\300"
 1154      00000000 
 1154      00809898 
 1154      000000C0 
 1155 04aa 8080807F 		.ascii	"\200\200\200\177\000\000\010\370\000\000\200\200\200"
 1155      000008F8 
 1155      00008080 
 1155      80
 1156 04b7 00203F24 		.ascii	"\000 ?$\002-0 \000\000\010\010\370\000\000\000\000\000"
 1156      022D3020 
ARM GAS  /tmp/cc3HmRIO.s 			page 31


 1156      00000808 
 1156      F8000000 
 1156      0000
 1157 04c9 20203F20 		.ascii	"  ?  \000\000\200\200\200\200\200\200\200\000 ? \000"
 1157      20000080 
 1157      80808080 
 1157      80800020 
 1157      3F2000
 1158 04dc 3F20003F 		.ascii	"? \000?\200\200\000\200\200\200\000\000 ?!\000\000 "
 1158      80800080 
 1158      80800000 
 1158      203F2100 
 1158      0020
 1159 04ee 3F200000 		.ascii	"? \000\000\200\200\200\200\000\000\000\037    \037\000"
 1159      80808080 
 1159      0000001F 
 1159      20202020 
 1159      1F00
 1160 0500 80800080 		.ascii	"\200\200\000\200\200\000\000\000\200\377\241  \021\016"
 1160      80000000 
 1160      80FFA120 
 1160      20110E
 1161 050f 00000000 		.ascii	"\000\000\000\000\200\200\200\200\000\000\016\021  \240"
 1161      80808080 
 1161      00000E11 
 1161      2020A0
 1162 051e FF808080 		.ascii	"\377\200\200\200\200\000\200\200\200\000  ?! \000\001"
 1162      80008080 
 1162      80002020 
 1162      3F212000 
 1162      01
 1163 052f 00000080 		.ascii	"\000\000\000\200\200\200\200\200\000\0003$$$$\031\000"
 1163      80808080 
 1163      00003324 
 1163      24242419 
 1163      00
 1164 0540 008080E0 		.ascii	"\000\200\200\340\200\200\000\000\000\000\000\037  \000"
 1164      80800000 
 1164      0000001F 
 1164      202000
 1165 054f 00808000 		.ascii	"\000\200\200\000\000\000\200\200\000\000\037   \020"
 1165      00008080 
 1165      00001F20 
 1165      202010
 1166 055e 3F208080 		.ascii	"? \200\200\200\000\000\200\200\200\000\001\0160\010"
 1166      80000080 
 1166      80800001 
 1166      0E3008
 1167 056d 06010080 		.ascii	"\006\001\000\200\200\000\200\000\200\200\200\0170\014"
 1167      80008000 
 1167      8080800F 
 1167      300C
 1168 057b 030C300F 		.ascii	"\003\0140\017\000\000\200\200\000\200\200\200\000\000"
 1168      00008080 
 1168      00808080 
 1168      0000
 1169 0589 20312E0E 		.ascii	" 1.\0161 \000\200\200\200\000\000\200\200\200\200\201"
ARM GAS  /tmp/cc3HmRIO.s 			page 32


 1169      31200080 
 1169      80800000 
 1169      80808080 
 1169      81
 1170 059a 8E701806 		.ascii	"\216p\030\006\001\000\000\200\200\200\200\200\200\000"
 1170      01000080 
 1170      80808080 
 1170      8000
 1171 05a8 0021302C 		.ascii	"\000!0,\"!0\000\000\000\000\000\200|\002\002\000\000"
 1171      22213000 
 1171      00000000 
 1171      807C0202 
 1171      0000
 1172 05ba 0000003F 		.ascii	"\000\000\000?@@\000\000\000\000\377\000\000\000\000"
 1172      40400000 
 1172      0000FF00 
 1172      000000
 1173 05c9 000000FF 		.ascii	"\000\000\000\377\000\000\000\000\002\002|\200\000\000"
 1173      00000000 
 1173      02027C80 
 1173      0000
 1174 05d7 00004040 		.ascii	"\000\000@@?\000\000\000\000\000\006\001\001\002\002"
 1174      3F000000 
 1174      00000601 
 1174      010202
 1175 05e6 04040000 		.ascii	"\004\004\000\000\000\000\000\000\000\000"
 1175      00000000 
 1175      0000
 1176              		.global	F6x8
 1177              		.section	.rodata.F6x8,"a"
 1178              		.align	2
 1181              	F6x8:
 1182 0000 00000000 		.ascii	"\000\000\000\000\000\000"
 1182      0000
 1183 0006 0000002F 		.ascii	"\000\000\000/\000\000"
 1183      0000
 1184 000c 00000700 		.ascii	"\000\000\007\000\007\000"
 1184      0700
 1185 0012 00147F14 		.ascii	"\000\024\177\024\177\024"
 1185      7F14
 1186 0018 00242A7F 		.ascii	"\000$*\177*\022"
 1186      2A12
 1187 001e 00626408 		.ascii	"\000bd\010\023#"
 1187      1323
 1188 0024 00364955 		.ascii	"\0006IU\"P"
 1188      2250
 1189 002a 00000503 		.ascii	"\000\000\005\003\000\000"
 1189      0000
 1190 0030 00001C22 		.ascii	"\000\000\034\"A\000"
 1190      4100
 1191 0036 00004122 		.ascii	"\000\000A\"\034\000"
 1191      1C00
 1192 003c 0014083E 		.ascii	"\000\024\010>\010\024"
 1192      0814
 1193 0042 0008083E 		.ascii	"\000\010\010>\010\010"
 1193      0808
 1194 0048 000000A0 		.ascii	"\000\000\000\240`\000"
ARM GAS  /tmp/cc3HmRIO.s 			page 33


 1194      6000
 1195 004e 00080808 		.ascii	"\000\010\010\010\010\010"
 1195      0808
 1196 0054 00006060 		.ascii	"\000\000``\000\000"
 1196      0000
 1197 005a 00201008 		.ascii	"\000 \020\010\004\002"
 1197      0402
 1198 0060 003E5149 		.ascii	"\000>QIE>"
 1198      453E
 1199 0066 0000427F 		.ascii	"\000\000B\177@\000"
 1199      4000
 1200 006c 00426151 		.ascii	"\000BaQIF"
 1200      4946
 1201 0072 00214145 		.ascii	"\000!AEK1"
 1201      4B31
 1202 0078 00181412 		.ascii	"\000\030\024\022\177\020"
 1202      7F10
 1203 007e 00274545 		.ascii	"\000'EEE9"
 1203      4539
 1204 0084 003C4A49 		.ascii	"\000<JII0"
 1204      4930
 1205 008a 00017109 		.ascii	"\000\001q\011\005\003"
 1205      0503
 1206 0090 00364949 		.ascii	"\0006III6"
 1206      4936
 1207 0096 00064949 		.ascii	"\000\006II)\036"
 1207      291E
 1208 009c 00003636 		.ascii	"\000\00066\000\000"
 1208      0000
 1209 00a2 00005636 		.ascii	"\000\000V6\000\000"
 1209      0000
 1210 00a8 00081422 		.ascii	"\000\010\024\"A\000"
 1210      4100
 1211 00ae 00141414 		.ascii	"\000\024\024\024\024\024"
 1211      1414
 1212 00b4 00004122 		.ascii	"\000\000A\"\024\010"
 1212      1408
 1213 00ba 00020151 		.ascii	"\000\002\001Q\011\006"
 1213      0906
 1214 00c0 00324959 		.ascii	"\0002IYQ>"
 1214      513E
 1215 00c6 007C1211 		.ascii	"\000|\022\021\022|"
 1215      127C
 1216 00cc 007F4949 		.ascii	"\000\177III6"
 1216      4936
 1217 00d2 003E4141 		.ascii	"\000>AAA\""
 1217      4122
 1218 00d8 007F4141 		.ascii	"\000\177AA\"\034"
 1218      221C
 1219 00de 007F4949 		.ascii	"\000\177IIIA"
 1219      4941
 1220 00e4 007F0909 		.ascii	"\000\177\011\011\011\001"
 1220      0901
 1221 00ea 003E4149 		.ascii	"\000>AIIz"
 1221      497A
 1222 00f0 007F0808 		.ascii	"\000\177\010\010\010\177"
 1222      087F
ARM GAS  /tmp/cc3HmRIO.s 			page 34


 1223 00f6 0000417F 		.ascii	"\000\000A\177A\000"
 1223      4100
 1224 00fc 00204041 		.ascii	"\000 @A?\001"
 1224      3F01
 1225 0102 007F0814 		.ascii	"\000\177\010\024\"A"
 1225      2241
 1226 0108 007F4040 		.ascii	"\000\177@@@@"
 1226      4040
 1227 010e 007F020C 		.ascii	"\000\177\002\014\002\177"
 1227      027F
 1228 0114 007F0408 		.ascii	"\000\177\004\010\020\177"
 1228      107F
 1229 011a 003E4141 		.ascii	"\000>AAA>"
 1229      413E
 1230 0120 007F0909 		.ascii	"\000\177\011\011\011\006"
 1230      0906
 1231 0126 003E4151 		.ascii	"\000>AQ!^"
 1231      215E
 1232 012c 007F0919 		.ascii	"\000\177\011\031)F"
 1232      2946
 1233 0132 00464949 		.ascii	"\000FIII1"
 1233      4931
 1234 0138 0001017F 		.ascii	"\000\001\001\177\001\001"
 1234      0101
 1235 013e 003F4040 		.ascii	"\000?@@@?"
 1235      403F
 1236 0144 001F2040 		.ascii	"\000\037 @ \037"
 1236      201F
 1237 014a 003F4038 		.ascii	"\000?@8@?"
 1237      403F
 1238 0150 00631408 		.ascii	"\000c\024\010\024c"
 1238      1463
 1239 0156 00070870 		.ascii	"\000\007\010p\010\007"
 1239      0807
 1240 015c 00615149 		.ascii	"\000aQIEC"
 1240      4543
 1241 0162 00007F41 		.ascii	"\000\000\177AA\000"
 1241      4100
 1242 0168 00552A55 		.ascii	"\000U*U*U"
 1242      2A55
 1243 016e 00004141 		.ascii	"\000\000AA\177\000"
 1243      7F00
 1244 0174 00040201 		.ascii	"\000\004\002\001\002\004"
 1244      0204
 1245 017a 00404040 		.ascii	"\000@@@@@"
 1245      4040
 1246 0180 00000102 		.ascii	"\000\000\001\002\004\000"
 1246      0400
 1247 0186 00205454 		.ascii	"\000 TTTx"
 1247      5478
 1248 018c 007F4844 		.ascii	"\000\177HDD8"
 1248      4438
 1249 0192 00384444 		.ascii	"\0008DDD "
 1249      4420
 1250 0198 00384444 		.ascii	"\0008DDH\177"
 1250      487F
 1251 019e 00385454 		.ascii	"\0008TTT\030"
ARM GAS  /tmp/cc3HmRIO.s 			page 35


 1251      5418
 1252 01a4 00087E09 		.ascii	"\000\010~\011\001\002"
 1252      0102
 1253 01aa 0018A4A4 		.ascii	"\000\030\244\244\244|"
 1253      A47C
 1254 01b0 007F0804 		.ascii	"\000\177\010\004\004x"
 1254      0478
 1255 01b6 0000447D 		.ascii	"\000\000D}@\000"
 1255      4000
 1256 01bc 00408084 		.ascii	"\000@\200\204}\000"
 1256      7D00
 1257 01c2 007F1028 		.ascii	"\000\177\020(D\000"
 1257      4400
 1258 01c8 0000417F 		.ascii	"\000\000A\177@\000"
 1258      4000
 1259 01ce 007C0418 		.ascii	"\000|\004\030\004x"
 1259      0478
 1260 01d4 007C0804 		.ascii	"\000|\010\004\004x"
 1260      0478
 1261 01da 00384444 		.ascii	"\0008DDD8"
 1261      4438
 1262 01e0 00FC2424 		.ascii	"\000\374$$$\030"
 1262      2418
 1263 01e6 00182424 		.ascii	"\000\030$$\030\374"
 1263      18FC
 1264 01ec 007C0804 		.ascii	"\000|\010\004\004\010"
 1264      0408
 1265 01f2 00485454 		.ascii	"\000HTTT "
 1265      5420
 1266 01f8 00043F44 		.ascii	"\000\004?D@ "
 1266      4020
 1267 01fe 003C4040 		.ascii	"\000<@@ |"
 1267      207C
 1268 0204 001C2040 		.ascii	"\000\034 @ \034"
 1268      201C
 1269 020a 003C4030 		.ascii	"\000<@0@<"
 1269      403C
 1270 0210 00442810 		.ascii	"\000D(\020(D"
 1270      2844
 1271 0216 001CA0A0 		.ascii	"\000\034\240\240\240|"
 1271      A07C
 1272 021c 00446454 		.ascii	"\000DdTLD"
 1272      4C44
 1273 0222 14141414 		.ascii	"\024\024\024\024\024\024"
 1273      1414
 1274              		.global	F16x16
 1275              		.section	.data.F16x16,"aw"
 1276              		.align	2
 1279              	F16x16:
 1280 0000 1060028C 		.ascii	"\020`\002\214\000\376\222\222\222\222\222\222\222\376"
 1280      00FE9292 
 1280      92929292 
 1280      92FE
 1281 000e 00000404 		.ascii	"\000\000\004\004~\001\000\376\210HH\000~\220\210\210"
 1281      7E0100FE 
 1281      88484800 
 1281      7E908888 
ARM GAS  /tmp/cc3HmRIO.s 			page 36


 1282 001e E4008040 		.ascii	"\344\000\200@ \220\210\206\200\200\200\203\214\020 "
 1282      20908886 
 1282      80808083 
 1282      8C1020
 1283 002d 40800000 		.ascii	"@\200\000\000\200@ \030\007\000@\200@?\000\000\000\000"
 1283      80402018 
 1283      07004080 
 1283      403F0000 
 1283      0000
 1284 003f 000000FE 		.ascii	"\000\000\000\376\"\"\"\"\"\"\"\"\342\002\000\000\000"
 1284      22222222 
 1284      22222222 
 1284      E2020000 
 1284      00
 1285 0050 00007F42 		.ascii	"\000\000\177BBBBBBBBC@@\000\000\000\000|TUVT|TVUT|\000"
 1285      42424242 
 1285      42424243 
 1285      40400000 
 1285      00007C54 
 1286 006e 00000101 		.ascii	"\000\000\001\001\001\375EEEEEEE\375\001\001\001\000"
 1286      01FD4545 
 1286      45454545 
 1286      45FD0101 
 1286      0100
 1287 0080 10101010 		.ascii	"\020\020\020\020\020\377\020\020\360\020\021\026\320"
 1287      10FF1010 
 1287      F0101116 
 1287      D0
 1288 008d 10100080 		.ascii	"\020\020\000\200@ \030\006A \020?DBA@@x\000\004\004"
 1288      40201806 
 1288      4120103F 
 1288      44424140 
 1288      40780004 
 1289 00a2 0404FF24 		.ascii	"\004\004\377$$$$$\377\004\004\004\004\000DD$$\025\015"
 1289      24242424 
 1289      FF040404 
 1289      04004444 
 1289      2424150D 
 1290 00b6 05FF050D 		.ascii	"\005\377\005\015\025$$DD\000\004\004\004\004\377$$$"
 1290      15242444 
 1290      44000404 
 1290      0404FF24 
 1290      2424
 1291 00c8 2424FF04 		.ascii	"$$\377\004\004\004\004\000DD$$\025\015\005\377\005\015"
 1291      04040400 
 1291      44442424 
 1291      150D05FF 
 1291      050D
 1292 00da 15242444 		.ascii	"\025$$DD\000"
 1292      4400
 1293              		.text
 1294              	.Letext0:
 1295              		.file 2 "/home/yml/mondrian/arm-gnu-toolchain-13.2.Rel1-x86_64-arm-none-eabi/arm-none-eabi/include
 1296              		.file 3 "/home/yml/mondrian/arm-gnu-toolchain-13.2.Rel1-x86_64-arm-none-eabi/arm-none-eabi/include
 1297              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g474xx.h"
 1298              		.file 5 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1299              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
ARM GAS  /tmp/cc3HmRIO.s 			page 37


 1300              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_i2c.h"
 1301              		.file 8 "Core/Inc/i2c.h"
 1302              		.file 9 "Module/OLED/asc.h"
ARM GAS  /tmp/cc3HmRIO.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 oled.c
     /tmp/cc3HmRIO.s:21     .text.WriteCmd:00000000 $t
     /tmp/cc3HmRIO.s:27     .text.WriteCmd:00000000 WriteCmd
     /tmp/cc3HmRIO.s:66     .text.WriteCmd:00000028 $d
     /tmp/cc3HmRIO.s:71     .text.WriteDat:00000000 $t
     /tmp/cc3HmRIO.s:77     .text.WriteDat:00000000 WriteDat
     /tmp/cc3HmRIO.s:116    .text.WriteDat:00000028 $d
     /tmp/cc3HmRIO.s:121    .text.OLED_Init:00000000 $t
     /tmp/cc3HmRIO.s:127    .text.OLED_Init:00000000 OLED_Init
     /tmp/cc3HmRIO.s:256    .text.OLED_SetPos:00000000 $t
     /tmp/cc3HmRIO.s:262    .text.OLED_SetPos:00000000 OLED_SetPos
     /tmp/cc3HmRIO.s:302    .text.OLED_Fill:00000000 $t
     /tmp/cc3HmRIO.s:308    .text.OLED_Fill:00000000 OLED_Fill
     /tmp/cc3HmRIO.s:384    .text.OLED_CLS:00000000 $t
     /tmp/cc3HmRIO.s:390    .text.OLED_CLS:00000000 OLED_CLS
     /tmp/cc3HmRIO.s:411    .text.OLED_ON:00000000 $t
     /tmp/cc3HmRIO.s:417    .text.OLED_ON:00000000 OLED_ON
     /tmp/cc3HmRIO.s:446    .text.OLED_OFF:00000000 $t
     /tmp/cc3HmRIO.s:452    .text.OLED_OFF:00000000 OLED_OFF
     /tmp/cc3HmRIO.s:481    .text.OLED_ShowStr:00000000 $t
     /tmp/cc3HmRIO.s:487    .text.OLED_ShowStr:00000000 OLED_ShowStr
     /tmp/cc3HmRIO.s:713    .text.OLED_ShowStr:000000d0 $d
     /tmp/cc3HmRIO.s:1181   .rodata.F6x8:00000000 F6x8
     /tmp/cc3HmRIO.s:1078   .rodata.F8X16:00000000 F8X16
     /tmp/cc3HmRIO.s:719    .text.OLED_ShowChar:00000000 $t
     /tmp/cc3HmRIO.s:725    .text.OLED_ShowChar:00000000 OLED_ShowChar
     /tmp/cc3HmRIO.s:878    .text.OLED_ShowChar:00000088 $d
     /tmp/cc3HmRIO.s:884    .text.oled_pow:00000000 $t
     /tmp/cc3HmRIO.s:890    .text.oled_pow:00000000 oled_pow
     /tmp/cc3HmRIO.s:933    .text.OLED_ShowNum:00000000 $t
     /tmp/cc3HmRIO.s:939    .text.OLED_ShowNum:00000000 OLED_ShowNum
     /tmp/cc3HmRIO.s:1069   .text.OLED_ShowNum:0000008c $d
     /tmp/cc3HmRIO.s:1075   .rodata.F8X16:00000000 $d
     /tmp/cc3HmRIO.s:1178   .rodata.F6x8:00000000 $d
     /tmp/cc3HmRIO.s:1279   .data.F16x16:00000000 F16x16
     /tmp/cc3HmRIO.s:1276   .data.F16x16:00000000 $d

UNDEFINED SYMBOLS
HAL_I2C_Mem_Write
hi2c2
